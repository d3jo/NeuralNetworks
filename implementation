#include <iostream>
#include <string>
#include <vector>
#include <cmath>


/* Component - an abstract class that defines a pure virtual method calculate, which takes in a std::vector<float>
as input to the neural network and returns a std::vector<float> as output of the neural network */
class Component {
    public:
        virtual std::vector<float> calculate(const std::vector<float>& input) const = 0;
        virtual ~Component() = default;
};



/* Decorator - The abstract decorator class */
class Decorator : public Component {

    protected:
        Component* next_component;

    public:
        explicit Decorator(Component* next): next_component{next} {}
        ~Decorator() {
            delete next_component;
        }
};


/* Input - The concrete component that models the input nodes to a neural network. It just returns the argument given to
calculate */
class Input : public Component {
    public:
        // Fill out calculate method
        std::vector<float> calculate(const std::vector<float>& input) const override {
            return input;
        }
};

/* Bias - A concrete decorator that is constructed with the bias vector, a std::vector<float>. The return value of
calculate should perform vector addition: the bias vector plus the values obtained from the previous layer of the
network */
class Bias : public Decorator {

    const std::vector<float> bias_vector;

    public:
        // Fill out constructor
        Bias(const std::vector<float>& bias, Component* next): Decorator{next}, bias_vector{bias} {}

        // Fill out calculate method
        std::vector<float> calculate(const std::vector<float>& input) const override {

            // Get the output from the previous component (if it exists)
            std::vector<float> New = next_component->calculate(input);
            std::vector<float> ans(New.size());

            for (size_t i = 0; i < bias_vector.size(); ++i) {
                ans[i] = New[i] + bias_vector[i];
            }
            return ans;
        }
};


/* Weight - A concrete decorator that is constructed with a weights matrix std::vector<std::vector<float>>.
Each vector in the matrix describes the weights used to apply the linear combination from the input. For example,
if the previous layer provided {0.5, 1.0}, and our weight matrix is {{2.0, -3.0}, {-4.0, 5.0}, {0.1,
6.0}}, then the return value from calculate would be {2.0 * 0.5 + -3.0 * 1.0, -4.0 * 0.5 + 5.0
* 1.0, 0.1 * 0.5 + 6.0 * 1.0}. */
class Weight : public Decorator {
    std::vector<std::vector<float>> weight_matrix;  // reference type matrix

    public:
        // Fill out constructor
        Weight(const std::vector<std::vector<float>>& weights, Component* next): Decorator{next}, weight_matrix{weights} {}

        // Fill out calculate method
        std::vector<float> calculate(const std::vector<float>& input) const override {

            std::vector<float> New = next_component->calculate(input);

            std::vector<float> lin_comb(weight_matrix.size(), 0.0);

            for (size_t i = 0; i < weight_matrix.size(); ++i) {
                for (size_t j = 0; j < weight_matrix[i].size(); ++j) {
                    lin_comb[i] += weight_matrix[i][j] * New[j];
                }
            }
            
            return lin_comb;
            }
};


/* ActivationFunction - A concrete decorator that is constructed with a function pointer. The return value of
calculate should be the input from the previous layer, where the supplied function is applied to each node value (i.e,
each element in the vector) */
template <typename Func> class ActivationFunction : public Decorator {
    // The template means we don't have to remember function pointer syntax!
    Func fn;
    public:
        // Fill out constructor
        ActivationFunction(const Func& fn, Component* next): Decorator{next}, fn{fn} {}

        // Fill out calculate method
        std::vector<float> calculate(const std::vector<float>& input) const override {

            std::vector<float> New = next_component->calculate(input);
            std::vector<float> MappedVector(New.size(), 0.0);

            for (size_t i = 0; i < New.size(); i++) {  // map fn to all of the elements in mappedvector
                MappedVector[i] = fn(New[i]);
            }
            return MappedVector;
        }
};
